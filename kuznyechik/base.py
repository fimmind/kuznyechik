#!/usr/bin/env python
"""
An implementation of Kuznyechik cypher

Sources:
- GOST R 34.12-2015 (https://www.rfc-editor.org/rfc/rfc7801.html)
"""

from kuznyechik.galois import G
from operator import xor
import secrets

# Представление нелинейного биективного преобразования π: V₈ → V₈ в виде
# массива значений [π(0), ..., π(255)]. (Здесь и далее V_n обозначает множество
# всех n-битных двоичных строк)
# → пункт 4.1.1 из ГОСТа
pi_vec = bytearray([
    252, 238, 221, 17, 207, 110, 49, 22, 251, 196, 250, 218, 35, 197, 4, 77,
    233, 119, 240, 219, 147, 46, 153, 186, 23, 54, 241, 187, 20, 205, 95, 193,
    249, 24, 101, 90, 226, 92, 239, 33, 129, 28, 60, 66, 139, 1, 142, 79, 5,
    132, 2, 174, 227, 106, 143, 160, 6, 11, 237, 152, 127, 212, 211, 31, 235,
    52, 44, 81, 234, 200, 72, 171, 242, 42, 104, 162, 253, 58, 206, 204, 181,
    112, 14, 86, 8, 12, 118, 18, 191, 114, 19, 71, 156, 183, 93, 135, 21, 161,
    150, 41, 16, 123, 154, 199, 243, 145, 120, 111, 157, 158, 178, 177, 50,
    117, 25, 61, 255, 53, 138, 126, 109, 84, 198, 128, 195, 189, 13, 87, 223,
    245, 36, 169, 62, 168, 67, 201, 215, 121, 214, 246, 124, 34, 185, 3, 224,
    15, 236, 222, 122, 148, 176, 188, 220, 232, 40, 80, 78, 51, 10, 74, 167,
    151, 96, 115, 30, 0, 98, 68, 26, 184, 56, 130, 100, 159, 38, 65, 173, 69,
    70, 146, 39, 94, 85, 47, 140, 163, 165, 125, 105, 213, 149, 59, 7, 88, 179,
    64, 134, 172, 29, 247, 48, 55, 107, 228, 136, 217, 231, 137, 225, 27, 131,
    73, 76, 63, 248, 254, 141, 83, 170, 144, 202, 216, 133, 97, 32, 113, 103,
    164, 45, 43, 9, 91, 203, 155, 37, 208, 190, 229, 108, 82, 89, 166, 116,
    210, 230, 244, 180, 192, 209, 102, 175, 194, 57, 75, 99, 182
])

# Представление π⁻¹, обратного к π, в виде массива [π⁻¹(0), ..., π⁻¹(255)]
# → пункт 4.1.1 из ГОСТа
pi_inv_vec = bytearray([
    165, 45, 50, 143, 14, 48, 56, 192, 84, 230, 158, 57, 85, 126, 82, 145, 100,
    3, 87, 90, 28, 96, 7, 24, 33, 114, 168, 209, 41, 198, 164, 63, 224, 39,
    141, 12, 130, 234, 174, 180, 154, 99, 73, 229, 66, 228, 21, 183, 200, 6,
    112, 157, 65, 117, 25, 201, 170, 252, 77, 191, 42, 115, 132, 213, 195, 175,
    43, 134, 167, 177, 178, 91, 70, 211, 159, 253, 212, 15, 156, 47, 155, 67,
    239, 217, 121, 182, 83, 127, 193, 240, 35, 231, 37, 94, 181, 30, 162, 223,
    166, 254, 172, 34, 249, 226, 74, 188, 53, 202, 238, 120, 5, 107, 81, 225,
    89, 163, 242, 113, 86, 17, 106, 137, 148, 101, 140, 187, 119, 60, 123, 40,
    171, 210, 49, 222, 196, 95, 204, 207, 118, 44, 184, 216, 46, 54, 219, 105,
    179, 20, 149, 190, 98, 161, 59, 22, 102, 233, 92, 108, 109, 173, 55, 97,
    75, 185, 227, 186, 241, 160, 133, 131, 218, 71, 197, 176, 51, 250, 150,
    111, 110, 194, 246, 80, 255, 93, 169, 142, 23, 27, 151, 125, 236, 88, 247,
    31, 251, 124, 9, 13, 122, 103, 69, 135, 220, 232, 79, 29, 78, 4, 235, 248,
    243, 62, 61, 189, 138, 136, 221, 205, 11, 19, 152, 2, 147, 128, 144, 208,
    36, 52, 203, 237, 244, 206, 153, 16, 68, 64, 146, 58, 1, 38, 18, 26, 72,
    104, 245, 129, 139, 199, 214, 32, 10, 8, 0, 76, 215, 116
])

# Матричное представление линейного преобразования ℓ в поле Галуа G(2^8)
# → пункт 4.1.2 из ГОСТа
l_vec: [G] = [
    G(x) for x in
    [148, 32, 133, 16, 194, 192, 1, 251, 1, 192, 194, 16, 133, 32, 148, 1]
]


# Обёртка, представляющая π как функцию
def pi(x: int) -> int:
    return pi_vec[x]


# Обёртка, представляющая π⁻¹ как функцию
def pi_inv(x: int) -> int:
    return pi_inv_vec[x]


# Обёртка, представляющая ℓ как функцию
def ell(x: bytearray) -> int:
    res = G(0)
    for i in range(16):
        res += l_vec[i] * G(x[i])
    return int(res)


# Преобразование X[k]: V₁₂₈ → V₁₂₈ определённое, как
#     X[k](a) := k ⊕ a,
# где ⊕ есть побитовая операция XOR.
# → пункт 4.2 из ГОСТа
def X(k: bytearray, x: bytearray) -> bytearray:
    return bytearray(map(xor, k, x))


# Преобразование S: V₁₂₈ → V₁₂₈, применяющее π к каждому байту аргумента
# → пункт 4.2 из ГОСТа
def S(x: bytearray) -> bytearray:
    return bytearray(map(pi, x))


# Преобразование S⁻¹, обратное к S, применяющее π⁻¹ к каждому байту аргумента
# → пункт 4.2 из ГОСТа
def S_inv(x: bytearray) -> bytearray:
    return bytearray(map(pi_inv, x))


# Преобразование R: V₁₂₈ → V₁₂₈, определённое на строке из 16 байт как
#     R([a₁₅, ..., a₀]) := [ℓ(a₁₅, ..., a₀), a₁₅, ..., a₁]
# → пункт 4.2 из ГОСТа
def R(x: bytearray) -> bytearray:
    return bytearray([ell(x)]) + x[:15]


# Преобразование L: V₁₂₈ → V₁₂₈, применяющая R 16 раз, то есть
#     L(x) := R¹⁶(x)
# → пункт 4.2 из ГОСТа
def L(x: bytearray) -> bytearray:
    for _ in range(16):
        x = R(x)
    return x


# Преобразование R⁻¹, обратное к R. Алгоритм его вычисления дан в ГОСТе без
# пояснений:
#     R⁻¹([a₁₅, ..., a₀]) := [a₁₄, ..., a₀, ℓ(a₁₄, ..., a₀, a₁₅)]
# → пункт 4.2 из ГОСТа
def R_inv(x: bytearray) -> bytearray:
    return x[1:] + bytearray([ell(x[1:] + x[:1])])


# Преобразование L⁻¹, обратное к L, применяющее R⁻¹ 16 раз
# → пункт 4.2 из ГОСТа
def L_inv(x: bytearray) -> bytearray:
    for _ in range(16):
        x = R_inv(x)
    return x


# Преобразование F[k] двух 128-битных строк, определённое как
#     F[k](a₁, a₀) := (LSX[k](a₁) ⊕ a₀, a₁),
# где LSX есть композиция отображений L, S и X, то есть
#     LSX[k](a) = L(S(X[k](a)))
# → пункт 4.2 из ГОСТа
def F(k: bytearray, y: bytearray, x: bytearray) -> bytearray:
    return X(L(S(X(k, y))), x), y


# Итерационные константы, используемые алгоритмом развёртывания ключа,
#     C_i := L([0, 0, ..., 0, i])
# для i = 1, 2, ..., 32. В частности,
#     C_1 = 0x6ea276726c487ab85d27bd10dd849401,
#     C_2 = 0xdc87ece4d890f4b3ba4eb92079cbeb02,
#     ...
# → пункт 4.3 из ГОСТа
C = [L(i.to_bytes(16, "big")) for i in range(1, 33)]


# Функция, инкапсулирующая алгоритм развёртывания 256-битного ключа шифрования
# в массив из 128-битных итерационных ключей K_i для i = 1, ..., 10
# → пункт 4.3 из ГОСТа
def expand_key(key: int) -> [bytearray]:
    key = key.to_bytes(32, "big")
    K = [key[:16], key[16:]]
    for i in range(4):
        K.extend(K[-2:])
        for j in range(8):
            K[-2:] = F(C[8 * i + j], K[-2], K[-1])
    return K


# Функция, генерирующая уникальный 256-битных ключ шифрования
def gen_key():
    """Generate a unique encryption key"""
    return int.from_bytes(secrets.token_bytes(32), "big")


# Функция, инкапсулирующая алгоритм зашифрования
#     E_(K₁,⋯,K₁₀)(a) := X[K₁₀]LSX[K_₉]...LSX[K_₂]LSX[K_₁](a)
# → пункт 4.4.1 из ГОСТа
def encrypt_block(K: [bytearray], x: bytearray):
    """Encrypt a single block represented as an array of 16 bytes"""
    for i in range(9):
        x = L(S(X(K[i], x)))
    x = X(K[9], x)
    return x


# Функция, инкапсулирующая алгоритм расшифрования, выполняющая преобразования,
# обратные преобразованию E_(K₁, ..., K₁₀)
# → пункт 4.4.2 из ГОСТа
def decrypt_block(K: [bytearray], x: bytearray):
    """Decrypt a single block represented as an array of 16 bytes"""
    x = X(K[9], x)
    for i in range(9):
        x = X(K[8 - i], S_inv(L_inv(x)))
    return x
